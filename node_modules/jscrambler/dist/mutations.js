"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addApplicationSource = addApplicationSource;
exports.applyTemplate = applyTemplate;
exports.cancelProtection = cancelProtection;
exports.createApplication = createApplication;
exports.createApplicationProtection = createApplicationProtection;
exports.createApplicationProtections = createApplicationProtections;
exports.createTemplate = createTemplate;
exports.duplicateApplication = duplicateApplication;
exports.removeApplication = removeApplication;
exports.removeProtection = removeProtection;
exports.removeSourceFromApplication = removeSourceFromApplication;
exports.removeTemplate = removeTemplate;
exports.unlockApplication = unlockApplication;
exports.updateApplication = updateApplication;
exports.updateApplicationSource = updateApplicationSource;
exports.updateTemplate = updateTemplate;
require("core-js/modules/web.dom-collections.iterator.js");
var _cleanupInputFields = _interopRequireDefault(require("./cleanup-input-fields"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const createApplicationDefaultFragments = "\n  _id,\n  createdAt,\n  name\n";
function createApplication(data) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createApplicationDefaultFragments;
  return {
    query: "\n      mutation createApplication ($data: ApplicationCreate!) {\n        createApplication(data: $data) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      data
    }
  };
}
const duplicateApplicationDefaultFragments = "\n  _id\n";
function duplicateApplication(id) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : duplicateApplicationDefaultFragments;
  return {
    query: "\n      mutation duplicateApplication ($_id: String!) {\n        duplicateApplication (_id: $_id) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      _id: id
    }
  };
}
const removeApplicationDefaultFragments = "\n  _id\n";
function removeApplication(id) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : removeApplicationDefaultFragments;
  return {
    query: "\n      mutation removeApplication ($_id: String!) {\n        removeApplication (_id: $_id) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      _id: id
    }
  };
}
const removeProtectionDefaultFragments = "\n  _id\n";
function removeProtection(id, appId) {
  let fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : removeProtectionDefaultFragments;
  return {
    query: "\n      mutation removeProtection ($_id: String!, $applicationId: String!) {\n        removeProtection (_id: $_id, applicationId: $applicationId) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      _id: id,
      applicationId: appId
    }
  };
}
const cancelProtectionDefaultFragments = "\n  _id\n";
function cancelProtection(id, appId) {
  let fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : cancelProtectionDefaultFragments;
  return {
    query: "\n      mutation cancelProtection ($_id: String!, $applicationId: String!) {\n        cancelProtection (_id: $_id, applicationId: $applicationId) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      _id: id,
      applicationId: appId
    }
  };
}
const updateApplicationDefaultFragments = "\n  _id,\n  createdAt,\n  name\n";
function updateApplication(applicationData) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : updateApplicationDefaultFragments;
  let applicationId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  const appId = applicationId !== null && applicationId !== void 0 ? applicationId : applicationData._id;
  delete applicationData._id;
  return {
    query: "\n      mutation updateApplication ($applicationId: String!, $data: ApplicationUpdate!) {\n        updateApplication (_id: $applicationId, data: $data) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      applicationId: appId,
      data: applicationData
    }
  };
}
const unlockApplicationDefaultFragments = "\n  _id,\n  createdAt,\n  name\n";
function unlockApplication(application) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : unlockApplicationDefaultFragments;
  return {
    query: "\n      mutation unlockApplication ($applicationId: String!) {\n        unlockApplication (_id: $applicationId) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      applicationId: application._id
    }
  };
}
const addApplicationSourceDefaultFragments = "\n  _id,\n  filename,\n  extension\n";
function addApplicationSource(applicationId, data) {
  let fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : addApplicationSourceDefaultFragments;
  return {
    query: "\n      mutation addSourceToApplication ($applicationId: String!, $data: ApplicationSourceCreate!) {\n        addSourceToApplication(applicationId: $applicationId, data: $data) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      applicationId,
      data
    }
  };
}
const updateApplicationSourceDefaultFragments = "\n  _id,\n  filename,\n  extension\n";
function updateApplicationSource(applicationSource) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : updateApplicationSourceDefaultFragments;
  const sourceId = applicationSource._id;
  delete applicationSource._id;
  return {
    query: "\n      mutation updateApplicationSource ($sourceId: String!, $data: ApplicationSourceUpdate!) {\n        updateApplicationSource(_id: $sourceId, data: $data) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      sourceId,
      data: applicationSource
    }
  };
}
const removeSourceFromApplicationDefaultFragments = "\n  _id,\n  sources {\n    filename\n  }\n";
function removeSourceFromApplication(filename, applicationId) {
  let fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : removeSourceFromApplicationDefaultFragments;
  return {
    query: "\n      mutation removeSource ($filename: String!, $applicationId: String!) {\n        removeSource (filename: $filename, applicationId: $applicationId) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      filename,
      applicationId
    }
  };
}
const createTemplateDefaultFragments = "\n  _id,\n  name,\n  description,\n  parameters\n";
function createTemplate(template) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createTemplateDefaultFragments;
  return {
    query: "\n      mutation createTemplate ($data: TemplateInput!) {\n        createTemplate (data: $data) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      data: template
    }
  };
}
const removeTemplateDefaultFragments = "\n  _id\n";
function removeTemplate(id) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : removeTemplateDefaultFragments;
  return {
    query: "\n      mutation removeTemplate ($_id: String!) {\n        removeTemplate (_id: $_id) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      _id: id
    }
  };
}
const updateTemplateDefaultFragments = "\n  _id,\n  parameters\n";
function updateTemplate(template) {
  let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : updateTemplateDefaultFragments;
  const templateId = template._id;
  delete template._id;
  return {
    query: "\n      mutation updateTemplate ($templateId: ID!, $data: TemplateInput!) {\n        updateTemplate (_id: $templateId, data: $data) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      templateId,
      data: template
    }
  };
}
const createProtectionDefaultFragments = "\n  _id,\n  state\n";
function createApplicationProtection(applicationId) {
  let _fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createProtectionDefaultFragments;
  let _options = arguments.length > 2 ? arguments[2] : undefined;
  let args = arguments.length > 3 ? arguments[3] : undefined;
  let {
    mutationName = 'createApplicationProtection',
    mutationInputType = 'ApplicationProtectionCreate'
  } = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  let fragments = _fragments;
  let options = _options;
  [options, fragments] = (0, _cleanupInputFields.default)(args, fragments, options);
  if (!args.some(f => f.name === 'options')) {
    const {
      bail,
      randomizationSeed
    } = options;
    return {
      query: "\n      mutation ".concat(mutationName, " ($applicationId: String!, $bail: Boolean, $randomizationSeed: String) {\n        ").concat(mutationName, " (applicationId: $applicationId, bail: $bail, randomizationSeed: $randomizationSeed) {\n          ").concat(fragments, "\n        }\n      }\n    "),
      params: {
        applicationId,
        bail,
        randomizationSeed
      }
    };
  }

  // Check if createApplicationProtection supports "data" argument
  if (args.some(arg => arg.name === 'data')) {
    return {
      query: "\n        mutation ".concat(mutationName, " ($applicationId: String!, $data: ").concat(mutationInputType, ") {\n          ").concat(mutationName, " (applicationId: $applicationId, data: $data) {\n            ").concat(fragments, "\n          }\n        }\n      "),
      params: {
        applicationId,
        data: options
      }
    };
  }
  return {
    query: "\n      mutation ".concat(mutationName, " ($applicationId: String!, $options: JSON) {\n        ").concat(mutationName, " (applicationId: $applicationId, options: $options) {\n          ").concat(fragments, "\n        }\n      }\n    "),
    params: {
      applicationId,
      options
    }
  };
}
const createProtectionsDefaultFragments = "\n  protections {\n   ".concat(createProtectionDefaultFragments, "\n  }\n");
function createApplicationProtections(applicationId) {
  let _fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createProtectionsDefaultFragments;
  let _options = arguments.length > 2 ? arguments[2] : undefined;
  let args = arguments.length > 3 ? arguments[3] : undefined;
  return createApplicationProtection(applicationId, _fragments, _options, args, {
    mutationName: 'createApplicationProtections',
    mutationInputType: 'ApplicationProtectionsCreate'
  });
}
const applyTemplateDefaultFragments = "\n  _id,\n  parameters\n";
function applyTemplate(templateId, appId) {
  let fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : applyTemplateDefaultFragments;
  return {
    query: "\n      mutation applyTemplate ($templateId: String!, $appId: String!) {\n        applyTemplate (templateId: $templateId, appId: $appId) {\n          ".concat(fragments, "\n        }\n      }\n    "),
    params: {
      templateId,
      appId
    }
  };
}