"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PREPEND_JS_TYPE = exports.APPEND_JS_TYPE = void 0;
exports.concatenate = concatenate;
exports.getMatchedFiles = getMatchedFiles;
exports.isJavascriptFile = isJavascriptFile;
exports.validateNProtections = validateNProtections;
var _glob = _interopRequireDefault(require("glob"));
var _fs = _interopRequireDefault(require("fs"));
var _fsExtra = require("fs-extra");
var _path = require("path");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Return the list of matched files for minimatch patterns.
 * @param {string} pattern
 * @returns {string[]}
 */
function getMatchedFiles(pattern) {
  let matchedFiles = _glob.default.sync(pattern, {
    dot: true
  });

  // special case when the real file name contains a minimatch expression (f.e [id]-1234.js)
  if (matchedFiles.length === 0 && _fs.default.existsSync(pattern)) {
    matchedFiles = [pattern];
  }
  return matchedFiles;
}
function validateNProtections(n) {
  if (n === undefined) {
    return n;
  }
  const nProtections = parseInt(n, 10);
  if (Number.isNaN(nProtections) || nProtections.toString() !== n.toString() || nProtections < 1) {
    console.error("*protections* requires an integer greater than 0.");
    process.exit(1);
  }
  return nProtections;
}
const APPEND_JS_TYPE = exports.APPEND_JS_TYPE = 'append-js';
const PREPEND_JS_TYPE = exports.PREPEND_JS_TYPE = 'prepend-js';

/**
 * 
 * @param {*} firstFile if prepending: script file; if appending: target file.
 * @param {*} secondFile if prepending: target file; if appending: script file.
 * @returns first and second files concatenated
 */
function handleScriptConcatenation(firstFile, secondFile) {
  const firstFileContent = firstFile.toString('utf-8');
  const secondFileContent = secondFile.toString('utf-8');
  const concatenatedContent = firstFileContent + "\n" + secondFileContent;
  return concatenatedContent;
}

/**
 * 
 * @param {*} scriptObject the object with the script content: { target: '/path/to/target/file', source: '/path/to/script/file', type: 'append-js' | 'prepend-js' }. Its used for both appending and prepending.
 * @param {*} cwd current working directory, passed by argument
 * @param {*} path file path (file being parsed)
 * @param {*} buffer file contents
 */
function concatenate(scriptObject, cwd, path, buffer) {
  let {
    target
  } = scriptObject;
  if (cwd) {
    target = (0, _path.join)(cwd, target);
  }
  target = (0, _path.normalize)(target);
  if (target === path) {
    const {
      source,
      type
    } = scriptObject;
    if (!(0, _fsExtra.existsSync)(source)) {
      throw new Error('Provided script file does not exist');
    }
    const fileContent = (0, _fsExtra.readFileSync)(target);
    const scriptContent = (0, _fsExtra.readFileSync)(source);
    const concatContent = type === APPEND_JS_TYPE ? handleScriptConcatenation(fileContent, scriptContent) : handleScriptConcatenation(scriptContent, fileContent);
    buffer = Buffer.from(concatContent, 'utf-8');
  }
  return buffer;
}
function isJavascriptFile(filename) {
  const fileExtension = (0, _path.extname)(filename);
  const validJsFileExtensions = ['.js', '.mjs', '.cjs'];
  return validJsFileExtensions.includes(fileExtension);
}