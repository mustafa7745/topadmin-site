"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cleanupInputFields;
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.regexp.constructor.js");
function cleanupInputFields(args, fragments) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let cleanedUpFragments = fragments;
  const dataArg = args.find(arg => arg.name === 'data');
  function fieldCleanUp(field) {
    const hasFieldArg = dataArg && dataArg.type.inputFields.some(e => e.name === field);
    if (!hasFieldArg && typeof options[field] !== 'undefined') {
      options[field] = undefined;
      cleanedUpFragments = cleanedUpFragments.replace(new RegExp(",?[s|\n]*".concat(field)), '');
      console.warn("This API Version does not support the ".concat(field, " argument."));
    }
  }
  ['tolerateMinification', 'useProfilingData', 'useAppClassification', 'inputSymbolTable', 'entryPoint', 'ensureCodeAnnotation'].forEach(fieldCleanUp);
  return [options, cleanedUpFragments];
}